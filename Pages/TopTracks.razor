@@page "/top-tracks"
@inject SpotifyApiService SpotifyApiService
@inject SpotifyAuthService SpotifyAuthService
@inject NavigationManager Navigation

<div class="container text-center mt-5 top-content">
    <h2 class="mb-3 top-text">See your fifteen most listened tracks</h2>

    @if (isLoading)
    {
        <div class="mt-4">
            <div class="spinner-border text-success" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Fetching your top tracks...</p>
        </div>
    }
    else if (!string.IsNullOrEmpty(statusMessage))
    {
        <div class="alert alert-info mt-4">@statusMessage</div>
    }
    else if (trackList?.Any() == true)
    {
        <div class="separator"></div>

        <div class="row">
            @foreach (var track in trackList)
            {
                <div class="col-md-4">
                    <div class="card mb-3 shadow card-control">
                        <a href="@track.Uri" target="_blank">
                            <img src="@track.ImageUri" class="card-img-top" alt="Track Image" style="height: 200px; object-fit: cover;">
                        </a>
                        <div class="card-body">
                            <a href="@track.Uri" target="_blank" class="text-decoration-none">
                                <p class="card-text text-center text-dark">@track.Name <br> by <p class="artist-name">@track.ArtistName</p></p>
                            </a>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private string statusMessage = "";
    private List<TrackModel> trackList = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        StateHasChanged();

        await Task.Delay(2000); 

        var accessToken = SpotifyAuthService.GetStoredAccessToken();
        if (string.IsNullOrEmpty(accessToken))
        {
            statusMessage = "You need to log in";
            isLoading = false;
            return;
        }

        try
        {
            var tracks = await SpotifyApiService.GetUserTopTracks(accessToken);
            trackList = tracks.Select(t => new TrackModel
                {
                    Name = t.Name,
                    ImageUri = t.ImageUri,
                    Uri = t.Uri,
                    ArtistName = t.ArtistName
                }).ToList();
        }
        catch (Exception ex)
        {
            statusMessage = $"Error: {ex.Message}";
        }

        isLoading = false;
    }
}


<style>
    .separator {
        margin: 40px auto;
        width: 60%;
        height: 2px;
        background-color: #1db954; 
        opacity: 0.8;
    }

    .top-content {
        margin-bottom: 50px;
    }

    .card {
        border-radius: 10px;
        transition: transform 0.3s ease-in-out;
    }

    .card-control:hover {
        border-color: #1DB954 !important;
        box-shadow: 0 0 5px rgba(29, 185, 84, 0.5) !important;
        outline: none !important;
        transform: scale(1.05);
    }
</style>